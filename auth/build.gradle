import java.security.Key
import java.security.KeyStore
import java.security.PrivateKey
import java.security.PublicKey
import java.security.cert.Certificate

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.security.oauth:spring-security-oauth2'
    compile 'org.springframework.security:spring-security-jwt'
    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'com.h2database:h2'
}

bootRun {
    systemProperties = [
            'spring.cloud.config.enabled': false,
            'spring.datasource.url'      : 'jdbc:h2:mem:auth',
            'spring.h2.console.enabled'  : true
    ]
}

// Создание файлов ключей
task createJwtTokenKeystoreAndPublicKey {
    def wrkDir = "${project.projectDir}/src/main/resources"
    def storeFileName = rootProject.name + ".jks"
    def keyFileName = rootProject.name + ".key"
    def alias = rootProject.name
    def password = "1q2w3e4r"

    doLast {
        delete "${wrkDir}/${storeFileName}"
        delete "${wrkDir}/${keyFileName}"

        // TODO Java-код
        exec {
            workingDir wrkDir
            commandLine "keytool", "-genkeypair", "-alias", alias, "-keyalg", "RSA", "-dname", "CN=${rootProject.name}", "-keystore", storeFileName, "-keypass", password, "-storepass", password
        }

        FileInputStream is = new FileInputStream("${wrkDir}/${storeFileName}")
        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType())
        keystore.load(is, password.toCharArray())
        Key key = keystore.getKey(alias, password.toCharArray())
        if (key instanceof PrivateKey) {
            Certificate cert = keystore.getCertificate(alias)
            PublicKey publicKey = cert.getPublicKey()
            def file = new File("${wrkDir}/${keyFileName}")
            file << "-----BEGIN PRIVATE KEY-----\n"
            file << new sun.misc.BASE64Encoder().encode(publicKey.getEncoded()) + "\n"
            file << "-----END PRIVATE KEY-----\n"
        }
    }
}
