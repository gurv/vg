plugins {
    id 'org.springframework.boot' version '2.0.3.RELEASE' apply false
    id 'com.bmuschko.docker-remote-api' version '3.6.1' apply false
    id 'com.gorylenko.gradle-git-properties' version '1.5.1' apply false
    id "org.sonarqube" version "2.6.2" apply false
}

apply plugin: 'idea'

group = 'io.github.gurv'
version = '0.1.0-SNAPSHOT'

ext {
    bomVersion = '0.1.0-SNAPSHOT'

    // проекты нв Spring Boot
    bootProjects = [
            project(':swagger'),
            project(':config'),
            project(':gateway'),
            project(':auth'),
            project(':account'),
            project(':metadata'),
            project(':skipper'),
            project(':skipper-shell'),
            project(':dataflow'),
            project(':dataflow-shell'),
    ]

    // проекты нв Spring Boot загружаемые, например, из Maven Central
    bootReadyProjects = [
            project(':skipper'),
            project(':skipper-shell'),
            project(':dataflow'),
            project(':dataflow-shell'),
    ]

    // monitoring & spring boot 1.5
    monitoringOldBootProjects = [
            project(':dataflow'),
            project(':skipper'),
    ]
}

subprojects {
    apply plugin: 'base'
    apply plugin: 'com.bmuschko.docker-remote-api'

    ext {
        dockerImageName = "gurv/vg-${project.path.substring(1).replace(':', '-')}:latest"
        dockerContainerName = "vg-${project.path.substring(1).replace(':', '-')}"
        dockerImageBuildArgs = []
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
        jcenter()
        mavenLocal()
        maven { url "https://oss.sonatype.org/service/local/repositories/snapshots/content/" }
    }

    docker {
        url = System.env.DOCKER_HOST ?: findProperty('dockerHostUrl') ?: url
        certPath = System.env.DOCKER_CERT_PATH ? new File(System.env.DOCKER_CERT_PATH) : certPath
        apiVersion = System.env.DOCKER_API_VERSION ?: apiVersion
    }
}

configure(project.bootProjects) {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'org.springframework.boot'
    //FIXME сборка swagger-aggregate с ошибкой java.io.IOException: Not a ref: refs/remotes/origin/master
    /*
        gradle api-swagger-aggregate:build

        возможно из за groovy в проекте api-swagger-aggregate
     */
    //apply plugin: 'com.gorylenko.gradle-git-properties'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    sourceCompatibility = '1.8'

    bootJar {
        baseName = "vg-${baseName}"
        version = rootProject.version
        excludeDevtools = true
    }

    bootRun {
        systemProperty 'spring.cloud.stream.kafka.binder.brokers', 'localhost:9092'
    }

    springBoot {
        buildInfo()
    }

    dependencies {
        // BOM-файл проекта (Maven-like dependency management)
        implementation "io.github.gurv:vg-dependencies:${rootProject.bomVersion}"

        implementation "org.springframework.boot:spring-boot-devtools"
        implementation "org.codehaus.groovy:groovy-all"

        // monitoring
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation 'io.micrometer:micrometer-registry-prometheus'

        //TODO https://github.com/gradle/gradle/issues/4979
        implementation ('org.yaml:snakeyaml:1.19') {
            force = true
        }

        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    tasks.withType(Test) {
        systemProperties = [
                'spring.cloud.config.enabled': false,
        ]
    }

    //FIXME не работает gradle publish
    //    Invalid publication 'maven': artifact file does not exist: '/opt/prj/vg-core/account/build/libs/account.jar'
    publishing {
        publications {
            bootJava(MavenPublication) {
                artifact bootJar
                groupId = rootProject.group
                artifactId = "vg-${project.name}"
                version = rootProject.version
                pom {
                    name = project.name
                    url = 'https://gurv.github.io/vg-doc/index.html'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'hhttp://www.opensource.org/licenses/mit-license.php'
                        }
                    }
                    developers {
                        developer {
                            id = 'gurv'
                            name = 'Vladimir Gurinovich'
                            email = 'vladimir.gurinovich@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/gurv/vg-core.git'
                        developerConnection = 'scm:git:ssh://github.com/gurv/vg-core.git'
                    }
                }
            }
            maven(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                name = 'ci'
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                url = rootProject.bomVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username System.env.CI_DEPLOY_USERNAME
                    password System.env.CI_DEPLOY_PASSWORD
                }
            }
        }
    }

    task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
        dependsOn build
        dockerFile file("docker/Dockerfile")
        inputDir = file(".")
        tag = "vg/${project.name}:latest"
        buildArgs = [
                'VG_VERSION': version,
                'JAR_FILE': "build/libs/vg-${project.name}-${project.rootProject.version}.jar",
        ]
    }
}

configure(project.bootReadyProjects) {
    apply plugin: 'application'

    configurations {
        extJar
    }

    dependencies {
        extJar "io.github.gurv:vg-dependencies:${rootProject.bomVersion}"
    }

    build.doLast {
/*
        copy {
            from configurations.extJar
            into "$buildDir/libs"
        }
*/

        copy {
            from "$project.buildDir/resources/main"
            into "$project.buildDir/libs"
        }
    }

    // Отключение ненужных задач
    [jar, startScripts, distZip, distTar].each { it.enabled = false }
}

configure(project.monitoringOldBootProjects) {
    configurations {
        monitoringOldBoot
    }

    dependencies {
        monitoringOldBoot "io.github.gurv:vg-dependencies:${rootProject.bomVersion}"
        monitoringOldBoot "io.micrometer:micrometer-spring-legacy"
        monitoringOldBoot "io.micrometer:micrometer-registry-prometheus"
    }

    build.doLast {
        copy {
            from configurations.monitoringOldBoot
            into "$buildDir/monitoring"
        }
    }
}