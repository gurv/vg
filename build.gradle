import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url "https://plugins.gradle.org/m2" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.21")
        classpath("com.bmuschko:gradle-docker-plugin:3.2.4")
    }
}

configure(rootProject) {
    ext {
        springCloudVersion = 'Finchley.RC1'
        springSecurityVersion = '5.0.6.RELEASE'
        springSecurityOAuthVersion = '2.3.3.RELEASE'
        springSecurityJwtVersion = '1.0.9.RELEASE'
        springCloudDataflowVersion = '1.5.1.RELEASE'
        springCloudSkipperVersion = '1.0.4.RELEASE'
        springfoxVersion = '2.9.2'
        micrometerVersion = '1.0.5'
        groovyVersion = '2.4.7'
        alpineVersion = '3.7'
        dockerVersion = '18.03.1-ce'

        // проекты нв Spring Boot
        bootProjects = [
                project(':swagger'),
                project(':config'),
                project(':gateway'),
                project(':auth'),
                project(':account'),
                project(':metadata'),
                project(':sample:operation'),
                project(':sample:account'),
        ]

        // готовые загружаемые (например, из Maven Central) jar-сборки проектов нв Spring Boot
        bootJarProjects = [
                project(':skipper'),
                project(':skipper-shell'),
                project(':dataflow'),
                project(':dataflow-shell'),
        ]

        // monitoring & spring boot 1.5
        monitoringOldBootProjects = [
                project(':dataflow'),
                project(':skipper'),
        ]

        // готовые загружаемые (например, из Docker Hub) docker-образы, в обертке этого проекта (напримеп, wurstmeister/kafka -> gurv/vg-kafka)
        dockerProjects = [
                project(':dataflow-shell'),
                project(':skipper-shell'),
        ]

        applicationTaskGroup = 'application'
        dockerTaskGroup = 'docker'
    }

    task upDockerCompose(type: Exec) {
        group = rootProject.dockerTaskGroup

        commandLine "docker-compose", "up"
    }
}

configure(subprojects) {
    apply plugin: 'base'

    ext {
        buildNoString = project.hasProperty('buildNo') ? "${buildNo}" : "0.1.0"
    }

    group = 'ru.gurv.vg'
    version = buildNoString
}

configure(subprojects.findAll {it.subprojects.size() == 0 }) {

    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
        jcenter()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.security:spring-security-bom:$rootProject.springSecurityVersion"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$rootProject.springCloudVersion"
        }
        dependencies {
            dependency "org.springframework.cloud:spring-cloud-skipper-server:$rootProject.springCloudSkipperVersion"
            dependency "org.springframework.cloud:spring-cloud-skipper-shell:$rootProject.springCloudSkipperVersion"
            dependency "org.springframework.cloud:spring-cloud-starter-dataflow-server-local:$rootProject.springCloudDataflowVersion"
            dependency "org.springframework.cloud:spring-cloud-dataflow-server-local:$rootProject.springCloudDataflowVersion"
            dependency "org.springframework.cloud:spring-cloud-dataflow-shell:$rootProject.springCloudDataflowVersion"
            dependency "org.springframework.security.oauth:spring-security-oauth2:$rootProject.springSecurityOAuthVersion"
            dependency "org.springframework.security:spring-security-jwt:$rootProject.springSecurityJwtVersion"
            dependency "io.springfox:springfox-swagger-ui:$rootProject.springfoxVersion"
            dependency "io.springfox:springfox-swagger2:$rootProject.springfoxVersion"
            dependency "io.micrometer:micrometer-registry-prometheus:$rootProject.micrometerVersion"
        }
    }

    ext {
        dockerImageName = "gurv/${rootProject.name}-${project.path.substring(1).replace(':', '-')}:latest"
        dockerContainerName = "${rootProject.name}-${project.path.substring(1).replace(':', '-')}"
        dockerImageBuildArgs = []
    }

    apply plugin: 'com.bmuschko.docker-remote-api'

    // https://github.com/bmuschko/gradle-docker-plugin/issues/467#issuecomment-353865846
    dependencies {
        dockerJava 'com.github.docker-java:docker-java:3.1.0-rc-2'
        dockerJava 'org.slf4j:slf4j-simple:1.7.5'
        dockerJava 'cglib:cglib:3.2.0'
    }

    docker {
        url = 'tcp://192.168.1.33:2373'
    }

    task buildImage(type: DockerBuildImage) {
        dependsOn build
        dockerFile file("src/main/docker/Dockerfile")
        inputDir = file(".")
        tag = "vg/${project.name}:latest"
        buildArgs = [
                'VG_VERSION': version,
        ]
    }
}

//TODO убрать в файл bootProjects.gradle
configure(project.bootProjects) {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'org.springframework.boot'
    //FIXME сборка swagger-aggregate с ошибкой java.io.IOException: Not a ref: refs/remotes/origin/master
    /*
        gradle api-swagger-aggregate:build

        возможно из за groovy в проекте api-swagger-aggregate
     */
    //apply plugin: 'com.gorylenko.gradle-git-properties'

    sourceCompatibility = '1.8'

    bootJar {
        baseName = rootProject.name + '-' + baseName
        excludeDevtools = true
    }

    springBoot {
        buildInfo()
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-devtools"

        // monitoring
        compile "org.springframework.boot:spring-boot-starter-actuator"
        runtime 'io.micrometer:micrometer-registry-prometheus'

        // groovy
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"

        testCompile "org.springframework.boot:spring-boot-starter-test"
    }

    tasks.withType(Test) {
        systemProperties = [
                'spring.cloud.config.enabled': false,
        ]
    }

    bootRun {
        systemProperty 'spring.cloud.stream.kafka.binder.brokers', 'localhost:9092'
    }
}

configure(project.bootJarProjects) {
    configurations {
        extJar
    }

    build.doLast {
        copy {
            from configurations.extJar
            into "$buildDir/libs"
        }

        copy {
            from "$project.buildDir/resources/main"
            into "$project.buildDir/libs"
        }
    }

    apply plugin: 'application'

    // Отключение ненужных задач
    [jar, startScripts, distZip, distTar].each { it.enabled = false }
}

configure(project.monitoringOldBootProjects) {
    configurations {
        monitoringOldBoot
    }

    dependencies {
        monitoringOldBoot "io.micrometer:micrometer-spring-legacy:$rootProject.micrometerVersion"
        monitoringOldBoot "io.micrometer:micrometer-registry-prometheus:$rootProject.micrometerVersion"
    }

    build.doLast {
        copy {
            from configurations.monitoringOldBoot
            into "$buildDir/monitoring"
        }
    }
}

configure(project.dockerProjects) {
    apply plugin: 'base'
}