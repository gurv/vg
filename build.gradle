buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url "https://plugins.gradle.org/m2" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.21")
    }
}

configure(rootProject) {
    ext {
        maintainer = 'Vladimir Gurinovich <vladimir.gurinovich@gmail.com>'

        springCloudVersion = 'Finchley.M8'
        springSecurityVersion = '5.0.3.RELEASE'
        springSecurityOAuthVersion = '2.2.1.RELEASE'
        springSecurityJwtVersion = '1.0.9.RELEASE'
        springCloudDataflowServerLocalVersion = '1.4.0.M1'
        springCloudDataflowShellVersion = '1.3.1.RELEASE'
        springCloudSkipperServerVersion = '1.0.1.RELEASE'
        springCloudSkipperShellVersion = '1.0.1.RELEASE'
        springfoxVersion = '2.8.0'
        h2Version = '2014-04-05'
        groovyVersion = '2.4.7'

        bootProjects = [
                project(':api:swagger-aggregate'),
                project(':discovery'),
                project(':config'),
                project(':gateway'),
                project(':auth'),
                project(':account'),
                project(':metadata'),
                project(':sample:operation'),
                project(':sample:account'),
        ]

        webProjects = [
                project(':web'),
        ]

        dockerProjects = [
                project(':api:swagger-ui'),
                project(':skipper:server'),
                project(':skipper:shell'),
                project(':database:server'),
                project(':database:data'),
                project(':stream:kafka'),
                project(':stream:zookeeper'),
                project(':dataflow:server'),
                project(':dataflow:shell'),
        ]

        documentationProjects = [
                project(':documentation'),
        ]

        discoveryProject = project(':discovery')

        dockerTaskGroup = 'docker'
    }

    task upDockerCompose(type: Exec) {
        group = rootProject.dockerTaskGroup

        commandLine "docker-compose", "up"
    }
}

configure(subprojects) {
    ext {
        buildNoString = project.hasProperty('buildNo') ? "${buildNo}" : "0.1.0"
    }

    group = 'ru.gurv.vg'
    version = buildNoString
}

configure(subprojects.findAll {it.subprojects.size() == 0 } - documentationProjects) {
    ext {
        dockerImageName = "gurv/${rootProject.name}-${project.path.substring(1).replace(':', '-')}:latest"
        dockerContainerName = "${rootProject.name}-${project.path.substring(1).replace(':', '-')}"
    }

    task dockerImage(type: Exec) {
        description = "Build docker-image project '$project.path'."
        group = rootProject.dockerTaskGroup

        doFirst {
            copy {
                from 'src/main/docker'
                filter {
                    it.replace('$$maintainer$$', rootProject.maintainer)
                            .replace('$$springCloudDataflowShellVersion$$', rootProject.springCloudDataflowShellVersion)
                            .replace('$$h2Version$$', rootProject.h2Version)
                            .replace('$$springCloudSkipperServerVersion$$', rootProject.springCloudSkipperServerVersion)
                            .replace('$$springCloudSkipperShellVersion$$', rootProject.springCloudSkipperShellVersion)
                            .replace('$$springCloudDataflowServerLocalVersion$$', rootProject.springCloudDataflowServerLocalVersion)
                }
                into "$project.buildDir/docker"
            }
        }

        commandLine "docker", "build",
                "-t", project.dockerImageName,
                "$project.buildDir/docker"
    }

    task dockerRun(type: Exec) {
        description = "Run docker-container project '$project.path'."
        group = rootProject.dockerTaskGroup

        commandLine "docker", "run",
                "-i",
                "--name", project.dockerContainerName,
                project.dockerImageName
    }

    task dockerPush(type: Exec) {
        description = "Push docker-image project '$project.path'."
        group = rootProject.dockerTaskGroup

        commandLine "docker", "push",
                project.dockerImageName
    }
}

configure(project.bootProjects) {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.gorylenko.gradle-git-properties'

    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
    }

    bootJar {
        baseName = rootProject.name + '-' + baseName
        excludeDevtools = true
    }

    springBoot {
        buildInfo()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.security:spring-security-bom:$rootProject.springSecurityVersion"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$rootProject.springCloudVersion"
        }
        dependencies {
            dependency "org.springframework.security.oauth:spring-security-oauth2:$rootProject.springSecurityOAuthVersion"
            dependency "org.springframework.security:spring-security-jwt:$rootProject.springSecurityJwtVersion"
            dependency "io.springfox:springfox-swagger-ui:$rootProject.springfoxVersion"
            dependency "io.springfox:springfox-swagger2:$rootProject.springfoxVersion"
        }
    }

    dependencies {
        // groovy
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"

        compile "org.springframework.boot:spring-boot-starter-actuator"
        testCompile "org.springframework.boot:spring-boot-starter-test"
    }

    tasks.withType(Test) {
        if (project != discoveryProject) {
            systemProperty 'eureka.client.enabled', 'false'
        }
    }

    dockerImage.doFirst {
        copy {
            from("$project.buildDir/libs") {
                include "$bootJar.archiveName"
            }
            into "$project.buildDir/docker"
            rename("$bootJar.archiveName", 'app.jar')
        }
    }
    dockerImage.dependsOn bootJar
}

configure(project.dockerProjects) {
    task clean(type: Delete) {
        description = "Deletes the build directory."
        group = BasePlugin.BUILD_GROUP

        delete project.buildDir
    }
}